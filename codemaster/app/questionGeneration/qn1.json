{
    "type": "Code Understanding",
    "title": "Valid Parentheses Checker",
    "content": [
      {
        "value": "Analyze the provided function designed to check the validity of a string containing just the characters '(', ')', '{', '}', '[' and ']'. Enhance the function to provide more detailed output.",
        "cateogory": "text"
      },
      {
        "value": "function isValid(s) {\n    let stack = [];\n    let mapping = { ')': '(', '}': '{', ']': '[' };\n    for (let char of s) {\n        if (char in mapping) {\n            let topElement = stack.length > 0 ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else {\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n}",
        "cateogory": "code"
      }
    ],
    "language": "Javascript",
    "difficulty": "Easy",
    "source": {
      "link": true,
      "src": "https://leetcode.com/problems/valid-parentheses/description/"
    },
    "parts": [
      {
        "part": "a",
        "question": "Which of the following best describes the function's method for validating parentheses?",
        "questionType": "MCQ",
        "options": [
          {
            "value" : "The function iterates through the string and removes all parentheses to see if any remain.",

            "category" : "text"
          },
          {
            "value" :  "The function uses a queue to add each character and then dequeues them to check for validity.",

            "category" : "text"
          },
          {
            "value" :  "The function uses a stack to manage opening brackets and checks matching closing brackets against the top of the stack.",

            "category" : "text"
          },
          {
            "value" : "The function recursively replaces adjacent pairs of valid brackets until no more can be replaced.",
            "category" : "text"
          }

        ],
        "points": 5,
        "expected": "The function uses a stack to manage opening brackets and checks matching closing brackets against the top of the stack."
      },
      {
        "part": "b",
        "question": "Which of the following data structures cannot replace the dictionary used in the `isValid` function to map closing brackets to their corresponding opening brackets? Select all that apply.",
        "questionType": "MCQ",
        "options": [
          {
            "value" : "List of tuples, where each tuple contains a pair of matching opening and closing brackets.",
            "category" : "text"
          },
          {
            "value" : "Set of tuples, where each tuple contains a pair of matching opening and closing brackets.",
            "category" : "text"
          },
          {
            "value" : "Two arrays, one for opening brackets and one for closing brackets, where indices of matching brackets correspond.",
            "category" : "text"
          },
          {
            "value" : "A single array containing only opening brackets, relying on their order to match with closing brackets in the code.",
            "category" : "text"
          }

        ],
        "points": 5,
        "expected": 4
    }
    ,
      {
        "part": "c",
        "question": "Modify the function to return the position of the first incorrect bracket if the string is invalid or -1 if the string is valid.",
        "questionType": "Freestyle",
        "format": ["string", "expected"],
        "inputs": [
          {
            "string": "()[]{}",
            "expected": -1
          },
          {
            "string": "(]",
            "expected": 1
          },
          {
            "string": "([)]",
            "expected": 2
          },
          {
            "string": "{[()]}",
            "expected": -1
          }
        ],
        "points": [2,2,2,2],
        "functionName" : "isValid",
        "code": "function isValid(string) {\n    let stack = [];\n    let mapping = { ')': '(', '}': '{', ']': '[' };\n    for (let char of s) {\n        if (char in mapping) {\n            let topElement = stack.length > 0 ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else {\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n}"

      }
    ]
}
